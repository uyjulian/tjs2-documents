<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>with statement</title>

<para>
<ptitle>with statement</ptitle>
　The <kw>with</kw> statement specifies the object to refer to if you omit the left (object) in the <tt>.</tt> (dot) operator.<r/>
<r/>
　The syntax is as follows:<r/>
<bq>
with(expression)<r/>
	Statement or block<r/>
</bq>
<r/>
　If the <tt>.</tt> (dot) operator is omitted in the "statement or block", the object referenced by the <tt>.</tt> (dot) operator is the object specified by the expression in the with statement.<r/>
<r/>
<example>
	with(obj) .member = 1; // Same as obj.member = 1;<r/>
<r/>
	with(obj)<r/>
	{<r/>
		.member1 = 1; // Assign 1 to obj.member1<r/>
		.member2 = 2; // Assign 2 to obj.member2<r/>
		.member3++; // Increment obj.member3<r/>
		.method(); // Call obj.method<r/>
	}<r/>
</example>
<r/>
　This statement can reduce typing, especially when setting a large number of properties on an object or calling methods in succession.<r/>
<r/>
　For example<r/>
<r/>
<bq>
	var object = new Foo();<r/>
	object.setPos(0, 0);<r/>
	object.setSize(100, 100);<r/>
	object.name = "No name";<r/>
	object.color = 0xffffffff;<r/>
</bq>
<r/>
　You can write a script like this:<r/>
<r/>
<bq>
	var object = new Foo();<r/>
	with(object)<r/>
	{<r/>
		.setPos(0, 0);<r/>
		.setSize(100, 100);<r/>
		.name = "No name";<r/>
		.color = 0xffffffff;<r/>
	}<r/>
</bq>
<r/>
</para>

<para>
<ptitle>with statement and object</ptitle>
　The expression specified in the with statement is evaluated only once at the beginning of with, and only references it.<r/>
<r/>
　For example,<r/>
<r/>
<bq>
this.dic = %[];<r/>
with(this.dic)<r/>
{<r/>
	.member = 1; // Assign 1 to this.dic.member<r/>
	this.dic = 0; // Assign something different to dic<r/>
	.member = 2; // Assign 2 to this.dic.member<r/>
}<r/>
</bq>
<r/>
　The second assignment to .member will succeed. This is because this.dic is evaluated the first time with is executed, and then the result is used. We do not always evaluate this.dic.<r/>
<r/>
　Since the evaluation is performed only once at the first time, if the application refers to the object many times, the code to refer to the object will not be generated every time, which may be faster.<r/>
<r/>
　The above example can be thought of as generating code equivalent to:<r/>
<r/>
<bq>
this.dic = %[];<r/>
{<r/>
	var anonymous_special_local_variable = this.dic;<r/>
	anonymous_special_local_variable.member = 1;<r/>
	this.dic = 0;<r/>
	anonymous_special_local_variable.member = 2;<r/>
}<r/>
</bq>
<r/>
　The with statement assigns the result of the evaluation of expression to an anonymous special local variable that can only be accessed with the left-hand omitted . (dot) operator, and subsequently uses the left-hand omitted . (dot) operator. The "anonymous_special_local_variable" will be referenced.<r/>
　The scope in which the result of evaluating expression is retained can be regarded as the same as the local variable scope of "anonymous_special_local_variable" above (the same applies to the scope of the with statement).<r/>
</para>


<para>
<ptitle>The . operator outside the with statement</ptitle>
　If the left side of the <tt>.</tt> (dot) operator is omitted outside the with statement, it refers to a global object.<r/>
　For example, outside the with statement<r/>
<r/>
<tt>.foo = 1;</tt><r/>
<r/>
　If you write<r/>
<r/>
<tt>global.foo = 1;</tt><r/>
<r/>
　Has the same meaning as<r/>
</para>

</doc>

