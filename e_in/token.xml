<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>token</title>
<para>
<ptitle>token</ptitle>
　During interpretation, scripts are all broken down into units called tokens and processed.<r/>
　The boundaries between the token and the next token depend on the type of token.
</para>

<para>
<ptitle>Naked word</ptitle>
　A "naked word" is a specific sequence of characters written directly in a script that is not quoted (<tt>""</tt> or <tt>''</tt>).<r/>
　"Naked words" have the following rules:<r/>
　<r/>
<ul>
<li>It consists of lowercase and uppercase letters of the alphabet, '<tt>_</tt>' (under bar), numbers, and so-called full-width characters. However, numbers cannot be at the beginning.</li>
<li>Until these sequences end, they are treated as one "naked word"</li>
</ul>
<r/>
<example>
	ampan  // OK<r/>
	123a // NG because the number comes first<r/>
	_asdf // OK because the underbar can be at the top<r/>
	continue // This is a reserved word OK<r/>
	全角文字 // So-called full-width characters are OK as "naked words"<r/>
</example>
<r/>
　"Naked words" are further divided into reserved words and identifiers.<r/>
</para>

<para>
<ptitle>Reserved word</ptitle>
　Reserved words are the following, not identifiers. All "naked words" that are not reserved words are identifiers.<r/>
<r/>
<tt>
  break  continue  const  catch  class  case<r/>
  debugger  default  delete  do  extends  export<r/>
  enum  else  function  finally  false  for<r/>
  global  getter  goto  incontextof  Infinity<r/>
  invalidate  instanceof  isvalid  import  int  in<r/>
  if  NaN  null  new  octet  protected  property<r/>
  private  public  return  real  synchronized  switch<r/>
  static  setter  string  super  typeof  throw<r/>
  this  true  try  void  var  while  with</tt>
<r/>
<r/>
　Each of these reserved words has a special meaning as an important use in constructing the grammar of a script. Some of these are used as operators.<r/>
　However, not all of these reserved words are used in the current version.<r/>
</para>

<para>
<ptitle>identifier</ptitle>
　"Identifier" is any of the "naked words" that are not reserved words. These are used for variables, functions, and class names that can be freely named by the writer.<r/>
　If an identifier contains a reserved word but is not a reserved word itself, it will be recognized as an identifier instead of a reserved word.<r/>
</para>

<para>
<ptitle>symbol</ptitle>
　Symbols are also decomposed as tokens. The symbols are as follows.<r/>
<r/>
<tt>>>>=  >>>  >>=  >>  >=  >  &lt;&lt;=  &lt;=<r/>
&lt;->  &lt;&lt;  &lt;  ===  ==  =>  =  !==  !=  !<r/>
&amp;&amp;=  &amp;&amp;  &amp;=  &amp;  ||=<r/>
||  |=  |  ...   .   ++  +=  +  -=  --  -  *=<r/>
*  /=  /  \=  \  %=  %  ^=  ^  [  ]  (  )  ~<r/>
?  :  ,  ;  {  }  #  $</tt><r/>
<r/>
　These are cut out as tokens with the longest match. For example, <tt>++</tt> is decomposed as <tt>++</tt> instead of <tt>+</tt> and <tt>+</tt> . If you want to write them as separate <tt>+</tt> and <tt>+</tt>, use a space between <tt>+</tt> and <tt>+</tt>. Must be sandwiched.<r/>
<r/>
　Symbols have important meanings as components of the grammar. Some of the symbols are used as operators.<r/>
</para>

<para>
<ptitle>Numeric immediate</ptitle>
　Numeric immediates are numbers or begin with <tt>.</tt> (decimal point). <tt>TJS2</tt> recognizes the following format.<r/>
　If you write a number as usual, it will be a decimal number immediate value as it is.<r/>
<example>
	0<r/>
	3.1<r/>
	342.3<r/>
	1<r/>
</example>
<r/>
　You can also use <tt>e</tt> or <tt>E</tt> for decimal, and specify <kw>index</kw> with 10 as the base. The meaning is the same for <tt>e</tt> and <tt>E</tt>.<r/>
<example>
	1e-3   // 1×10<sup>-3</sup><r/>
	3.4e10   // 3.4×10<sup>10</sup><r/>
	9.3E-2  // 9.3×10<sup>-2</sup><r/>
</example>
<r/>
　If prefixed with <tt>0x</tt> or <tt>0X</tt>, it will be specified in <kw>hexadecimal</kw>. The meaning is the same for <tt>0x</tt> and <tt>0X</tt>.<r/>
<example>
	0x1234<r/>
	0Xff<r/>
	0x3f33<r/>
</example>
<r/>
　If prefixed with <tt>0b</tt> or <tt>0B</tt>, it will be specified in <kw>binary</kw>.<r/>
<example>
	0b0100<r/>
	0B0010100010100001<r/>
</example>
<r/>
　If it is preceded by <tt>0</tt>, it is treated as <kw>octal</kw>.<r/>
<example>
	01234<r/>
	033<r/>
</example>
<r/>
　For hexadecimal, octal, and binary, exponents can be specified by decimal point format and p. p is a base 2 exponent specification.<r/>
<example>
	0b1.1    // 1 + 1/2 represents 1.5<r/>
	0x2.f    // 2 + 15/16 represents 2.9375<r/>
	0x1p8    // 1 × 2<sup>8</sup> represents 256.0<r/>
</example>
<r/>
<r/>
　A numeric immediate is treated as a single numeric immediate as long as it is a constituent character of a numeric immediate.<r/>
</para>

<para>
<ptitle>String immediate</ptitle>
　String immediates (string literals) are enclosed in <tt>""</tt> (double quotes) or <tt>''</tt> (single quotes). You can use double quotes or single quotes.<r/>
　However, <tt>'</tt> (single quotation) in <tt>""</tt> (double quotation) and <tt>"</tt> (double quotation) in <tt>''</tt> (single quotation) no longer need to be escaped with <tt>\</tt>.<r/><!--'-->
<example>
	"this is a string."<r/>
	'this is also a string.'<r/>
	"Can't use without a quotation."<r/>
</example>
<r/>
　<tt><kw>\</kw></tt> (backslash) has a special meaning in the string. The meaning changes with the character following the \. The special specification following \ is called <kw>escape</kw>.<r/>
<r/>
<bq>
\\    : \ mark itself<r/>
\'    : ' (Single quotation)<r/>
\"    : " (Double quotation)<r/>
\a    : BEL (Audible bell)<r/>
\b    : BS (Backspace)<r/>
\f    : FF (Form feed)<r/>
\n    : LF (Line feed)<r/>
\r    : CR (Carriage return)<r/>
<r/>
\t    : HT (Horizontal tab)<r/>
\v    : VT (Vertical tab)<r/>
\xH   : H=Hexadecimal (H represents the character code)<r/>
\XH   : Same as above<r/>
</bq>
<r/>
　The format is <tt>\xH</tt>, where H is a hexadecimal number. Then, the hexadecimal number is treated as a character code and replaced by that one character.
<r/>
<r/>
<example>
	'Can\'t help'  (Using \ ')<r/>
	"\x1234"     (Character with character code 0x1234 as wide character)<r/>
</example>
<r/>
Also, in the format <tt>\xH</tt>, as long as \x is followed by the characters that make up the hexadecimal number (0-9, A-Z, a-z), it is the H-part. Will be considered. However, up to 4 digits are recognized in a 16-bit wide character environment, and up to 8 digits in a 32-bit machine (16-bit for Windows, 32-bit for Linux and Solaris).<r/>
<tt>"<em>\x22A</em>n Apple"</tt> Anyway, the beginning is assumed to be \x22A. To avoid this, write the string separately as <tt>"\x22" "An Apple"</tt>. In TJS, if a string immediate value is continuous like this, it is regarded as one string.<r/>
<r/>
　See also <link href="string"/> for strings.<r/>
</para>


<para>
<ptitle>String immediate with @</ptitle>
　If you put @ before the string immediate, it will be interpreted as an expression between &amp; and; or between ${ and } in the string immediate, and the result of evaluating it will be expanded there. (If you write an expression between &amp; and ; or between ${ and }, the result will be embedded there.)<r/>
　If you don't want to expand &amp; or $, you can prevent &amp; or $ from expanding by placing a \ before &amp; or $.<r/>
<r/>
<example>
	@"1+2=&amp;1+2;"  (Becomes the string "1 + 2 = 3")<r/>
	@"The content of variable f is &amp;f;"  (Expand the contents of variable f to the location of &amp;f;)<r/>
	@"The result of calling function func is &amp;func();"  (If valid as an expression, it can be written between &amp; and;)<r/>
	@"The result of calling function func is ${func()}"  (Same as above)<r/>
	@"true \&amp;\&amp; false is &amp;true &amp;&amp; false;"  (&amp; is not expanded if \ is written before &amp;)<r/>
</example>
<r/>
　The expression described here can access variables (including local variables) that are accessible from the location where this string is written.<r/>
</para>


<para>
<ptitle>Octet column immediate</ptitle>
　The octet sequence immediate is enclosed by <tt>&lt;%</tt> and <tt>%></tt>, and octet data (binary data) can be written in it.<r/>
　For data, specify two or more hexadecimal numbers separated by spaces.<r/>
<example>
	&lt;% 00 01 02 03 %><r/>
	&lt;% ff ff ff 00 04 0f ff 30 %><r/>
</example>
<r/>
　See also <link href="octet"/> for octet sequences.<r/>
</para>

<para>
<ptitle>Regular expression pattern</ptitle>
　A regular expression pattern is enclosed between <tt>/</tt> and <tt>/</tt>, and you can write a regular expression pattern inside.<r/>
　A regular expression pattern can be followed by a flag character, g is a global search flag (match everything found; without this flag only the first one), i is case insensitive The flag, l, is a flag that causes localized collation.<r/>
　Regular expression patterns written in this way are treated as objects of the RegExp class.<r/>
<example>
	/[0-9]-[0-9]-[0-9]/<r/>
	/^;\s*(.*?)\s*=(.*)$/<r/>
	/start(.*?)end/gi<r/>
</example>
<r/>
　See also <link href="regexp"/> for regular expression patterns.<r/>
</para>



</doc>
