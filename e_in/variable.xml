<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>variable</title>

<para>
<ptitle>variable</ptitle>
　TJS2 variables are specified with the <kw>var</kw> keyword. TJS2 cannot be used without declaring variables.<r/>
　The format of the var keyword is:<r/>
<bq>
　var variable_name;<r/>
</bq>
　You can specify multiple variable names separated by <kw>,</kw> (comma). If a variable requires an initial value,<r/>
<bq>
　var variable_name = initial_value;<r/>
</bq>
　You can assign an initial value to a variable in the format<r/>
<example>
	var variable=0;<r/>
	var var2=variable+2;<r/>
	var var3="this is var3.";<r/>
	var var1,var2,var3;<r/>
	var a=0,b=1,c=3;<r/>
</example>
<r/>
　Variables do not need to be typed when they are declared. The type of the assigned one. In addition, the type is automatically converted during calculation or in context.<r/>
</para>

<para>
<ptitle>Variable name</ptitle>
　All identifiers are valid variable names.<r/>
<example>
	var ampan;<r/>
	var 123a;  // NG because the number comes first<r/>
	var function; // function is a reserved word, so NG<r/>
	var function1; // OK, including reserved words but not reserved words<r/>
	var 変数その一; // So-called full-width characters can also be used<r/>
</example>
</para>

<para>
<ptitle>Variable declaration</ptitle>
　It is not an error to declare a variable with the same name more than once. However, if an initial value is specified in the second and subsequent declarations, that initial value is assigned to the variable. If no initial value is given in the second and subsequent declarations, it will be void.<r/>
<example>
	var a=0;<r/>
	var a; // Second declaration (no error, a becomes void)<r/>
	var a=-1; // Third declaration (no error, but -1 is assigned to a)<r/>
</example>
</para>

<para>
<ptitle>Variable scope</ptitle>
　Variables declared in { } (blocks) are variables that are valid only within the block, that is, <kw>local variables</kw>.<r/>
　Also, unlike the C language, there are no restrictions on where variables can be declared.<r/>
<example>
	while(t--)<r/>
	{<r/>
		var ratio=t/all; // Declare variable 'ratio'<r/>
		setRatio(ratio);<r/>
	}<r/>
<r/>
	// When control transfers here, 'ratio' has been deleted<r/>
<r/>
	var test; // You can also declare variables here<r/>
</example>
<r/>
　Also, if a variable with the same name as a variable outside a block is declared inside the block, only the newly declared variables can be accessed within that block.<r/>
<example>
	var ratio=0;<r/>
	if(flag)<r/>
	{<r/>
		var ratio; // Variable with the same name as a variable declared outside the block<r/>
<r/>
		ratio=buf.position / buf.totalTime; // Can only access ratio in block<r/>
		setRatio(ratio);<r/>
	}<r/>
<r/>
	// When leaving a block, the ratio inside the block is deleted, but the ratio outside the block remains unchanged<r/>
	ratio=-1;<r/>
</example>
<note>
　If you declare a variable with var outside any scope (this is called the global scope), the variable becomes a member of the global object.<r/>
</note>
</para>
</doc>

