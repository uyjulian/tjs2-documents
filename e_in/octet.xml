<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>Operations on octet columns</title>

<para>
<ptitle>Operations on octet columns</ptitle>
　In TJS2, the octet sequence is supposed to be an object of the <kw>Octet</kw> class, but the Octet class does not exist and is not actually an object of the Octet class (but Using the typeof operator on an octet sequence returns "Octet").<r/>
　However, considering the octet sequence as an object, several methods and properties are available.<r/>
<r/>
　The octet sequence implementation is incomplete.<r/>
</para>

<para>
<ptitle>length</ptitle>
　The length property returns the length of the octet sequence. Note that it is a property, not a method. However, you cannot assign a value to this property.<r/>
<r/>
<example>
	var oct = &lt;% 11 22 33 %>;<r/>
	var n = oct.length;  // 3 is substituted for n<r/>
	var n = &lt;% 11 22 33 %>.length; // This is also assigned 3<r/>
</example>
</para>

<para>
<ptitle>'Number' property</ptitle>
　By indirectly specifying a number as a property, you can access the octet at that position.<r/>
　The result is expressed as an octet number.<r/>
　For example, if oct is an expression representing a sequence of octets, oct [0] is a number representing the value of the first octet.<r/>
　An exception is raised if the number is longer than the octet column or negative.<r/>
<r/>
　Assignment expressions cannot be generated.<r/>
<example>
	var oct = &lt;% 11 22 33 44 55 %>;<r/>
	var c = oct[0];  // 0x11 is assigned to c<r/>
	var c = oct[2];  // 0x22 is assigned to c<r/>
	oct[3] = 'A'; // An error occurs because an assignment expression cannot be generated<r/>
	var c = oct[100]; // Error because value is out of range<r/>
</example>
</para>

<para>
<ptitle>unpack</ptitle>
　The unpack method returns a binary (Octet) as an Array according to the character string specified by the argument.<r/>
　The specified string is called a template.<r/>
　A template is a list of type designators and their lengths. When * is specified as the length, it indicates all remaining lengths. If the length is omitted, it is treated as 1.<r/>
<bq>
Syntax: unpack(template string)<r/>
</bq>
The following characters can be used in the template string.<r/>
　a : ASCII string (null characters are completed)<r/>
　A : ASCII string (space complemented)<r/>
　b : Binary string (low-order bit to high-order bit)<r/>
　B : Binary string (high-order bit to low-order bit)<r/>
　c : Signed 1-byte numeric value (-128 to 127)<r/>
　C : Unsigned 1-byte numeric value (0 to 255)<r/>
　d : Double-precision floating-point value<r/>
　f : Single-precision floating-point value<r/>
　h : Hexadecimal string (low nybble first)<r/>
　H : Hexadecimal string (high nybble first)<r/>
　i : Signed int number (usually 4 bytes)<r/>
　I : Unsigned int number (usually 4 bytes)<r/>
　l : Signed long number (usually 4 bytes)<r/>
　L : Unsigned long number (usually 4 bytes)<r/>
　n : Unsigned short number (network byte order)<r/>
　N : Unsigned long number (network byte order)<r/>
　s : Signed short number (usually 2 bytes)<r/>
　S : Unsigned short number (usually 2 bytes)<r/>
　v : Unsigned short value (little endian)<r/>
　V : Unsigned long value (little endian)<r/>
　x : Skip one byte<r/>
　X : One byte backward<r/>
　@ : Move to specified position<r/>
　m : Base64 encode<r/>
<example>
	var array = octet.unpack("a4i2");<r/>
</example>
　In this example, the first 4 bytes of octet are assumed to be ASCII characters, and a 4-character string is output to the 0th position of the array.<r/>
　Next, 8 bytes are output as the first and second of the array as two 32-bit signed integers.<r/>
　In other words, the string "xxxx" is output to array[0], and integers are output to array[1] and array[2].<r/>
</para>



</doc>
