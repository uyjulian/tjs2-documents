<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>式と演算子</title>

<para>
<ptitle>式と演算子</ptitle>
　<kw>式</kw>は、演算子とオペランドの集まり、あるいは即値です。<r/>
<r/>
　通常、スクリプト中に以下のように記述することができます。<r/>
<r/>
<tt>
	式;<r/>
</tt>
<r/>
　このように式の後にセミコロンをつけると、その式がその場で評価( = 実行 )され、その式としての結果は捨てられます。<r/>
<r/>
<example>
	a = b;<r/>
	// 演算子 = の動作によって、a 変数に 変数b が代入される<r/>
<r/>
	func();<r/>
	// 演算子 ( ) の動作によって、func が関数として呼び出されるが、関数の戻り値<r/>
	// は捨てられる<r/>
<r/>
	1 + 3;<r/>
	// + 演算子の動作によって、1 と 3 が加算されるが、結果は捨てられる(実際はこ<r/>
	// の式は意味を持たないので実行すらされない)<r/>
</example>
</para>

<para>
<ptitle>真と偽</ptitle>
　いくつかの演算子は、真か偽 (論理値) を扱います。演算の結果が 0 の場合は偽、0 以外の場合は 真になります。<r/>
　文字列に対して真偽が問われた場合は、空文字列の場合は偽、それ以外の場合は数値に変換しようとして成功すれば、その数値としての結果が真偽になり、失敗すれば偽になります。<r/>
</para>

<para>
<ptitle>演算子</ptitle>
　以下、演算子を優先順位の低いものから順に説明していきます。<r/>
</para>


<para>
<ptitle>if 演算子</ptitle>
　if 演算子 <tt>if</tt> は、右側にあるものを評価した結果が真の場合のみに、左側にあるものを評価する演算子です。<r/>
<example>
	a=b if b!=0; // b が 0 でなければ a に b を代入<r/>
</example>
<r/>
　演算子の結果を得ることはできません。<r/>
</para>

<para>
<ptitle>順次演算子</ptitle>
　順次演算子 <tt><kw>,</kw></tt> (カンマ) は、左にあるものを評価して、つぎに右側にあるものを評価します。それ以外の事は行いません。演算子全体としては、右側にあるものを評価した結果になります。カンマが続けて複数書かれた場合は、左側にあるものから順に評価されます。<r/>
<example>
	c = (a=1, b=2); // a=1, b=2 が評価され、c には 2 が代入される<r/>
	a=1, b=2, c=3; // a=1, b=2, c=3 の順に評価される<r/>
</example>
</para>

<para>
<ptitle>代入演算子</ptitle>
　代入演算子には以下のものがあります。<r/>
<r/>
<tt><kw>=</kw>  <kw>&lt;-></kw>  <kw>&amp;=</kw>  <kw>|=</kw>  <kw>^=</kw>  <kw>-=</kw>  <kw>+=</kw>  <kw>%=</kw>  <kw>/=</kw>  <kw>\=</kw>  <kw>*=</kw>  <kw>||=</kw>  <kw>&amp;&amp;=</kw>  <kw>>>=</kw>  <kw>&lt;&lt;=</kw>  <kw>>>>=</kw></tt>
<r/>
　このうち、 = 演算子は単純代入演算子で、右側のものを評価した結果を左側のものに代入するという動作をし、演算子全体の値としては右側にあるものを評価した結果となります。<r/>
<example>
	a = 0;  // a に 0 を代入<r/>
	a = b = c = 0; // c , b, a の順に 0 を代入<r/>
</example>
<r/>
　<tt>&lt;-></tt> 演算子はいれかえを行います。まず、左側のものを評価し、次に右側のものを評価します。そのあと、右側を評価した結果を左側に代入し、左側を評価した結果を右側に代入します。演算子の結果を得ることはできません。<r/>
　現時点では左右の式はそれぞれ、式の値を得るためと式に代入するために<b>２回評価されます</b>。将来的にこの仕様は変更される可能性があるので、評価回数に依存した記述をしないようにしてください。<r/>
<r/>
　それ以外の演算子は、すべて、<tt>演算子=</tt> の形式をとっており、<tt>A 演算子= B</tt> と記述された場合は、<tt>A = A 演算子 B</tt> という意味になります。演算子全体の値としては、演算の結果の値となります。<r/>
</para>

<para>
<ptitle>条件演算子</ptitle>
　条件演算子 <tt><kw>? :</kw></tt> は３項演算子です。<tt>A ? B : C</tt> の形式で書くと、A を評価し、真だった場合に B を評価し、C を無視します。偽だった場合は C を評価し、B を無視します。演算子全体の値としては、B または C の評価された方の値になります。<r/>
<r/>
　条件演算子は左辺値として使うことができます。<r/>
<example>
	a = b==0 ? c : b; // b が 0 だったら a に c を、 b が 0 でなかったら a に b を代入<r/>
	b==0 ? (a=c) : (a=b); // 上と同じ意味<r/>
	(a ? b : c ) = d; // a が真ならば b に、a が偽ならば c に、 d を代入 (左辺値として使用した例)<r/>
</example>
</para>

<para>
<ptitle>論理 OR 演算子</ptitle>
　論理 OR 演算子 <tt><kw>||</kw></tt> は、左側にあるものをまず評価し、真ならば右側にあるものを無視して、演算子全体の結果としては真になります。左側にあるものを評価した結果が偽だった場合、右側にあるものを評価し、その真偽の結果が演算子全体の結果となります。<r/>
</para>

<para>
<ptitle>論理 AND 演算子</ptitle>
　論理 AND 演算子 <tt><kw>&amp;&amp;</kw></tt> は、左側にあるものをまず評価し、偽ならば右側にあるものを無視して、演算子全体の結果としては偽になります。左側にあるものを評価した結果が真だった場合、右側にあるものを評価し、その結果が演算子全体の結果となります。<r/>
</para>

<para>
<ptitle>ビット OR 演算子</ptitle>
　ビット OR 演算子 <tt><kw>|</kw></tt> は、ビットごとの論理 OR をとります。左側にあるもの、右側にあるものの順に評価し、その結果を整数として、ビットごとの OR をとったものが演算子全体の値となります。<r/>
</para>

<para>
<ptitle>ビット XOR 演算子</ptitle>
　ビット XOR 演算子 <tt><kw>^</kw></tt> は、ビットごとの論理 XOR をとります。左側にあるもの、右側にあるものの順に評価し、その結果を整数として、ビットごとの XOR をとったものが演算子全体の値となります。<r/>
</para>

<para>
<ptitle>ビット AND 演算子</ptitle>
　ビット AND 演算子 <tt><kw>&amp;</kw></tt> は、ビットごとの論理 AND をとります。左側にあるもの、右側にあるものの順に評価し、その結果を整数として、ビットごとの AND をとったものが演算子全体の値となります。<r/>
</para>

<para>
<ptitle>同定演算子</ptitle>
　<tt><kw>==</kw>  <kw>!=</kw>  <kw>===</kw>  <kw>!==</kw></tt>は同定演算子の類です。<r/>
<r/>
<dl>

<dt><tt>==</tt> 演算子</dt>
<dd><tt>==</tt> 演算子は、左側にあるものを先に評価し、次に右側にあるものを評価します。両者が一致すれば演算子全体で真、一致しなければ演算子全体で偽になります。両辺の演算の結果、型が異なれば適切に変換されてから比較されます。たとえば、<tt>-1 == '-1'</tt> は真になります。</dd>

<dt><tt>!=</tt> 演算子</dt>
<dd><tt>!=</tt> 演算子は、<tt>==</tt> 演算子の真偽が逆になったものです。</dd>

<dt><tt>===</tt> 演算子</dt>
<dd><tt>===</tt> 演算子は識別比較演算子と呼ばれ、<tt>==</tt> 演算子と同じですが、型の変換は行われず、型までもが一致しなければ真になりません。</dd>

<dt><tt>!==</tt> 演算子</dt>
<dd><tt>!==</tt> 演算子は、<tt>===</tt> 演算子の真偽が逆になったものです。</dd>
</dl>
</para>

<para>
<ptitle>比較演算子</ptitle>
　<tt><kw>&lt;</kw>  <kw>></kw>  <kw>&lt;=</kw>  <kw>>=</kw></tt> は比較演算子の類です。<r/>
<r/>
<dl>

<dt><tt>&lt;</tt> 演算子</dt>
<dd><tt>&lt;</tt> 演算子は、左側にあるものを先に評価し、右側にあるものを次に評価します。左側を評価した結果が右側を評価した結果よりも小さければ真になり、そうでなければ偽になります。</dd>

<dt><tt>></tt> 演算子</dt>
<dd><tt>></tt> 演算子は、左側にあるものを先に評価し、右側にあるものを次に評価します。右側を評価した結果が左側を評価した結果よりも小さければ真になり、そうでなければ偽になります。</dd>

<dt><tt>&lt;=</tt> 演算子</dt>
<dd><tt>&lt;=</tt> 演算子は、左側にあるものを先に評価し、右側にあるものを次に評価します。左側を評価した結果が右側を評価した結果よりも小さいか等しいならば真になり、そうでなければ偽になります。</dd>

<dt><tt>>=</tt> 演算子</dt>
<dd><tt>>=</tt> 演算子は、左側にあるものを先に評価し、右側にあるものを次に評価します。右側を評価した結果が左側を評価した結果よりも小さいか等しいならば真になり、そうでなければ偽になります。</dd>
</dl>
<r/>
　比較するものが両方とも文字列の場合は、ワイド文字コード順(通常はUNICODE)での比較になります。<r/>
</para>

<para>
<ptitle>ビットシフト演算子</ptitle>
　<tt><kw>>></kw>  <kw>&lt;&lt;</kw>  <kw>>>></kw></tt>はビットシフト演算子の類です。<r/>
<r/>
<dl>

<dt><tt>>></tt> 演算子</dt>
<dd><tt>>></tt> 演算子は、まず左側にあるものを評価し、右側にあるものを次に評価します。左側の結果を整数として、右側の結果の回数分だけ右に符号付きビットシフトしたものが演算子全体の結果となります。</dd>

<dt><tt>&lt;&lt;</tt> 演算子</dt>
<dd><tt>&lt;&lt;</tt> 演算子は、まず左側にあるものを評価し、右側にあるものを次に評価します。左側の結果を整数として、右側の結果の回数分だけ左にビットシフトしたものが演算子全体の結果となります。</dd>

<dt><tt>>>></tt> 演算子</dt>
<dd><tt>>>></tt> 演算子は、<tt>>></tt>演算子と同じですが、左側を評価した結果を符号無し整数として扱います。</dd>
</dl>
</para>

<para>
<ptitle>加減算演算子</ptitle>
　<tt><kw>+</kw>  <kw>-</kw></tt> は、それぞれ加算演算子と減算演算子です。<r/>
<r/>
<dl>

<dt><tt>+</tt> 演算子</dt>
<dd><tt>+</tt> 演算子は、先に左側を評価し、次に右側を評価します。結果が両方とも数値だった場合は、数値としての加算が行われ、演算子全体の結果となります。どちらか、あるいは両方が文字列だった場合は、文字列としての加算が行われ、演算子全体としては 左側の結果の後ろに右側の結果を結合した文字列になります。数値は文字列に、オブジェクト型は文字列に変換できれば変換されます。</dd>

<dt><tt>-</tt> 演算子</dt>
<dd><tt>-</tt> 演算子は、先に左側を評価し、次に右側を評価します。その後、数値として左側の結果から右側の結果が引かれ、それが演算子全体の値となります。</dd>
</dl>
</para>

<para>
<ptitle>乗除余算演算子</ptitle>
　<tt><kw>%</kw>  <kw>/</kw>  <kw>\</kw>  <kw>*</kw></tt> は、それぞれ剰余算、除算、整数除算、乗算演算子です。<r/>
<r/>
<dl>

<dt><tt>%</tt> 演算子</dt>
<dd><tt>%</tt> 演算子は、先に左側を評価し、次に右側を評価します。そのあと、左側を右側で割った剰りが演算子全体の値になります。値は両方とも整数として扱われます。</dd>

<dt><tt>/</tt> 演算子</dt>
<dd><tt>/</tt> 演算子は、先に左側を評価し、次に右側を評価します。そのあと、左側を右側で割った値が演算子全体の値になります。値は実数として扱われます。</dd>

<dt><tt>\</tt> 演算子</dt>
<dd><tt>\</tt> 演算子は、/ 演算子のように除算を行いますが、値は整数として扱われます。</dd>

<dt><tt>*</tt> 演算子</dt>
<dd><tt>*</tt> 演算子は、先に左側を評価し、次に右側を評価します。そのあと、左側を右側で掛けた値が演算子全体の値になります。値は実数として扱われます。</dd>
</dl>
</para>

<para>
<ptitle>一般的な単項演算子の類</ptitle>
　以下はすべて単項演算子です ( <tt>instanceof</tt> は例外 )。<r/>
<r/>
<dl>

<dt><tt><kw>!</kw></tt> 演算子</dt>
<dd>前置の <tt>!</tt> 演算子は、論理否定演算子です。右側にあるものを評価したものの真偽を逆にしたものが演算子全体の値となります。</dd>

<dt><tt><kw>~</kw></tt> 演算子</dt>
<dd><tt>~</tt> 演算子は、ビット否定演算子です。右側にあるものを評価したものを整数とし、ビットごとの否定 ( 1→0、0→1 ) を行ったものが演算子全体の値となります。</dd>

<dt><tt><kw>--</kw></tt> 演算子</dt>
<dd>前置の <tt>--</tt> 演算子は、前置<kw>デクリメント</kw>演算子です。右側にあるものから１を減じ、減じた後の値が演算子全体の値となります。</dd>

<dt><tt><kw>++</kw></tt> 演算子</dt>
<dd>前置の <tt>++</tt> 演算子は、前置<kw>インクリメント</kw>演算子です。右側にあるものに１を加算し、加算した後の値が演算子全体の値となります。</dd>

<dt><tt><kw>new</kw></tt> 演算子</dt>
<dd><tt>new</tt> 演算子は、右側にある関数評価式を関数呼び出しではなくオブジェクトの作成を行わせるようにします。</dd>

<dt><tt><kw>invalidate</kw> 演算子</tt></dt>
<dd><tt>invalidate</tt> 演算子は、右側にあるものを評価し、その結果のオブジェクトを無効化します。右側にある物が void, 文字列, 数値, オクテット列だった場合は何もしません。オブジェクトがすでに無効化されていた場合も何もしません。null が指定された場合は例外が発生します。</dd>

<dt><tt><kw>isvalid</kw> 演算子</tt></dt>
<dd><tt>isvalid</tt> 演算子は、右側、あるいは左側にあるものを評価し、その結果のオブジェクトが有効な場合に true、 無効な場合に false になります。演算子を評価対象の前に置いても、後ろに置いても同じ意味になります。対象が void, 文字列, 数値, オクテット列だった場合は常に真を返します。null が指定された場合は例外が発生します。</dd>

<dt><tt><kw>delete</kw> 演算子</tt></dt>
<dd><tt>delete</tt> 演算子は、右側に書いたオブジェクトのメンバ、あるいはローカル変数を消去します。消去に成功すれば true、失敗すれば false になります。</dd>

<dt><tt><kw>typeof</kw> 演算子</tt></dt>
<dd><tt>typeof</tt> 演算子は、右側にあるものを評価し、その型によって以下の文字列となります : void:"void"、整数:"Integer"、実数:"Real"、オブジェクト:"Object"、文字列:"String"、オクテット列:"Octet" 。ただし、オブジェクトのメンバを指定した場合で、メンバが無かった場合は "undefined" になります。</dd>

<dt><tt><kw>#</kw> 演算子</tt></dt>
<dd><tt>#</tt> 演算子は、右側にあるものを評価し、文字列として最初の一文字の文字コードを演算子全体の値とします。</dd>

<dt><tt><kw>$</kw> 演算子</tt></dt>
<dd><tt>$</tt> 演算子は、右側にあるものを評価し、その結果を文字コードとして、それが表す文字一文字を演算子全体の値とします。</dd>

<dt><tt><kw>+</kw> 演算子</tt></dt>
<dd>単項の <tt><kw>+</kw></tt> 演算子は、右側にあるものを評価します。右側にあるものが実数や整数ならば何もしません。それ以外の場合は、実数や数値への変換を試み、その結果が演算子全体の結果となります。文字列を数値に変換しようとする場合は、変換に失敗した場合は、例外を発生せず、 0 になります。小数点を含むような実数表現であれば実数に、そうでなければ整数に変換されます。文字列の先頭に 0x や 0b 、0 があれば、それぞれ 16 進数、2 進数、8 進数として解釈されます。</dd>

<dt><tt><kw>-</kw> 演算子</tt></dt>
<dd>単項の <tt>-</tt> 演算子は、左側にあるものを評価し、その結果を数値として、正負を逆にしたものを演算子全体の結果とします。</dd>

<dt><tt><kw>&amp;</kw> 演算子</tt></dt>
<dd>単項の <tt>&amp;</tt> 演算子は、右側に書いたオブジェクトのメンバへのアクセスを、プロパティハンドラを介さない、プロパティオブジェクトそのものへのアクセスに変更します。たとえば、propobj = &amp;obj.prop; では、obj のメンバプロパティ prop のプロパティハンドラは起動されず、メンバプロパティ prop の<kw>プロパティオブジェクト</kw>そのものへの参照が propobj に代入されます。右側がプロパティへのアクセスではなかった場合の動作は不定です。</dd>

<dt><tt><kw>*</kw> 演算子</tt></dt>
<dd>単項の <tt>*</tt> 演算子は、右側に書いたオブジェクトのプロパティハンドラを動作させます。右側にはプロパティオブジェクトを表す式を書かなければなりません。たとえば、*propobj = 1; は、プロパティオブジェクトである propobj の setter ハンドラを呼び出し、1 を代入します。</dd>

<dt><tt><kw>instanceof</kw> 演算子</tt></dt>
<dd><tt>instanceof</tt> 演算子は、左側にあるものを評価し、次に右側にあるものを評価します。右側にはクラス名となる、文字列になるものを書き、左側にあるものが、そのクラスのインスタンスであれば true、そうでなければ false になります。</dd>
</dl>
</para>

<para>
<ptitle>関数呼び出し、カッコ類、後置インクリメント・デクリメントなど</ptitle>
<dl>

<dt><tt><kw>(  )</kw> 演算子</tt></dt>
<dd><tt>(  )</tt> 演算子は、演算の優先順位を変更します。または、関数呼び出しを行います。</dd>

<dt><tt><kw>[  ]</kw> 演算子</tt></dt>
<dd><tt>[  ]</tt> 演算子は、間接メンバ選択演算子です。<tt>A [ B ]</tt> と書かれた場合、A を先に評価し、 B を次に評価します。B を文字列として、そのメンバ名を A から探し、演算子全体としてはそのメンバへのアクセスとなります。左辺値として使われた場合は、オブジェクト内にメンバ B を、もし無ければ新規に作成する、という作用も伴います。</dd>

<dt><tt><kw>.</kw> 演算子</tt></dt>
<dd><tt>.</tt> 演算子は、直接メンバ選択演算子です。<tt>A.B</tt> と書かれた場合、A を評価します。B を A から探し、演算子全体としてはそのメンバへのアクセスとなります。左辺値として使われた場合は、オブジェクト内にメンバ B を、もし無ければ新規に作成する、という作用も伴います。<r/>もし <tt>.</tt> 演算子の左側が省略された場合は、with ステートメントの外側ならば global オブジェクト内のメンバを、with ステートメントの内側ならばその with で示されたオブジェクトのメンバを参照します。</dd>

<dt><tt><kw>++</kw> 演算子</tt></dt>
<dd>後置の <tt>++</tt> 演算子は、後置インクリメント演算子です。左にあるものに１を加算し、演算子全体としては加算する前の、左にあるもの、になります。</dd>

<dt><tt><kw>--</kw> 演算子</tt></dt>
<dd>後置の <tt>--</tt> 演算子は、後置デクリメント演算子です。左にあるものから１を減じ、演算子全体としては減じる前の、左にあるもの、になります。</dd>

<dt><tt><kw>!</kw> 演算子</tt></dt>
<dd>後置の <tt>!</tt> 演算子は、式評価演算子です。左にあるものを評価した結果を文字列として、それを式文字列として解釈します。結果は、その式文字列を解釈して評価した結果になります。式は this コンテキスト (この演算子を使った位置での this) 上で動作します。</dd>

<dt><tt><kw>incontextof</kw> 演算子</tt></dt>
<dd><tt>incontextof</tt> 演算子は、左にあるものを先に評価し、次に右にあるものを評価します。左にあるものを評価した結果をオブジェクトとして、そのオブジェクトのコンテキスト部分を、右にあるものを評価した結果と置き換えたものが演算全体の結果となります。</dd>

<dt><tt><kw>int</kw> 演算子</tt></dt>
<dd>int 演算子は、右にあるものを評価し、それを整数型に変換したものが演算子全体の結果となります。C 言語のキャスト風に、(int) と書くこともできます。</dd>

<dt><tt><kw>real</kw> 演算子</tt></dt>
<dd>real 演算子は、右にあるものを評価し、それを実数型に変換したものが演算子全体の結果となります。C 言語のキャスト風に (real) と書くこともできます。</dd>

<dt><tt><kw>string</kw> 演算子</tt></dt>
<dd>string 演算子は、右にあるものを評価し、それを文字列型に変換したものが演算子全体の結果となります。C 言語のキャスト風に (string) と書くこともできます。</dd>
</dl>
</para>

</doc>
