<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>例外処理</title>

<para>
<ptitle>例外処理</ptitle>
　<kw>例外</kw>とは、通常の処理では考えられないような、いわゆる「例外」のことで、多くの場合「エラー」と同じと考えてください。<r/>
</para>

<para>
<ptitle>例外が発生する場所</ptitle>
　プログラム中のどこでも例外が発生する可能性があります。<r/>
　例外を発生させることを「例外を投げる(throw)」ともいいます。<r/>
　たとえば、以下のスクリプトがエラーを起こしたとします。<r/>
<r/>
<example>
	"3%0"!; // "0 で除算をしようとしました" 例外が発生する
</example>
<r/>
　このように 明らかに例外が発生する場合もありますが、発生するかしないかわからない場合もあります。<r/>
</para>

<para>
<ptitle>例外の捕捉</ptitle>
　<tt><kw>try</kw></tt> (試す) キーワードと、<tt><kw>catch</kw></tt> (捕捉) キーワードを使うと、例外を捕捉できます。<r/>
　たとえば、上の例で発生するかもしれない例外を捕捉するために、以下のようなスクリプトを書くことができます。<r/>
<r/>
<example>
	try // 例外が発生するするかもしれないので<r/>
	{<r/>
		func1(); // ここでは例外が発生するかもしれない<r/>
	}<r/>
	catch // 例外を捕捉する<r/>
	{<r/>
		// 例外がおきたとき、ここが実行される<r/>
		inform("画像を読み込むことができません。"); // メッセージを表示する<r/>
	}<r/>
</example>
<r/>
　このように、try のブロック内で例外の発生するかもしれない処理を書けば、例外がおきたときに catch のブロックを実行することができます。エラー処理をこのようにすっきりと書くことができます。<r/>
<r/>
　try のブロックでなにも例外が起きなかった場合は、catch のブロックも実行されません。<r/>
<r/>
　try のブロックでは何でも書くことができます。この例のように、はっきりとその行で例外がおきる可能性があることもありますが、関数呼び出しのそのまた関数呼び出しの先で例外が発生したときも、try ... catch を書いておけば例外が発生した時点でここに戻ってくることができます。<r/>
<r/>
　例外が発生した場合は、ブロックの残りの処理は中断され、try のある場所まで戻ってきます。<r/>
<r/>
　catch のブロックでまた例外が発生した場合は、例外はこの場所では捕捉されません。そのまま例外は関数呼び出しなどをさかのぼり、もしほかの場所で try で例外の捕捉が行われていればそこで捕捉されます。<r/>
<r/>
　例外が投げられてから、catch ブロックに到達する間に別の例外が発生する可能性もありますが、動作は未定義です。<r/>
<r/>
　例外がスクリプト内のどこでも捕捉されなかった場合、例外はそのままスクリプトを抜けてアプリケーションに渡され、そこで処理されます。<r/>
<note>
通常、このような例外はエラーとして実行を中断させてしまうので、なるべくエラーが起こりそうな場所には try ... catch を書くことをおすすめします。</note>
</para>

<para>
<ptitle>例外オブジェクト</ptitle>
　例外に関するさまざまな情報が、<kw>Exception</kw> というクラスのオブジェクトとともに投げられてきます。このオブジェクトを例外オブジェクトと呼びます。これを、catch で受け取ることができます。<r/>
　たとえば、以下のようなスクリプトを書くことができます。<r/>
<example>
	try<r/>
	{<r/>
		loadImages("nothing.jpeg"); // 例外が発生するかもしれない処理<r/>
	}<r/>
	catch (e) // e という変数で例外を受け取る<r/>
	{<r/>
		// e.message は、例外とともに投げられたメッセージ文字列を表します。<r/>
		// これには例外が発生した理由が説明されている場合があります。<r/>
		inform("画像を読み込むことができません。\n"+e.message);<r/>
	}<r/>
</example>
　このように、catch の後の丸カッコ内に受け取る変数を書き、その変数に例外オブジェクトを受け取ることができます。<r/>
　この変数のスコープは、catch の次のブロック内で始まり、このブロックとともに終わります。この変数はあらかじめ宣言されている必要はありません。<r/>
</para>

<para>
<ptitle>throw ステートメント</ptitle>
　例外を投げることもできます。例外を投げるには <tt><kw>throw</kw></tt> キーワードを使います。<r/>
　たとえば、以下のようなスクリプトを書くことができます。<r/>
<example>
	function pow2(n)<r/>
	{<r/>
		// 2 の n 乗を計算する n は正の整数でなければならない<r/>
		if(n&lt;0) throw new Exception("負の数は指定できません。");<r/>
			// ↑ 例外を発生する<r/>
		return 1&lt;&lt;n;<r/>
	}<r/>
</example>
　この関数の引数に -1 など、負の数が渡された場合、例外が発生します。例外を投げているのは以下のステートメントです。<r/>
<r/>
<bq>
throw new Exception("負の数は指定できません。");
</bq>
<r/>
　<tt>new Exception("負の数は指定できません。")</tt> についてですが、これは Exception クラスのオブジェクトを、文字列を引数にして作成しています。詳しくは Exception クラスを参照してください。そして、この新しく作成されたオブジェクトを throw キーワードで投げています。<r/>
　throw キーワードで投げることができるのは Exception クラスのオブジェクトとは限りません。数値でも文字列でも、関数への参照を投げることもできます。しかし、Exception クラス、またはそれから派生したクラスのオブジェクトを投げることが推奨されます。捕捉したときに catch のブロックで、Exception クラスのオブジェクトがくることのみを想定して書けばいいからです。<r/>
</para>

<para>
<ptitle>例外を再び投げる</ptitle>
　catch で例外を捕捉したのはいいが、まだ例外を受け取る可能性のある try がどこかに宣言されているかもしれない、そのような場合に例外を再び投げることができます。<r/>
　以下のようなスクリプトを書くことができます。<r/>
<example>
	function tryloadimage()<r/>
	{<r/>
		try<r/>
		{<r/>
			primaryLayer.loadImages("test1.bmp"); // test1.bmp を読んでみる<r/>
		}<r/>
		catch(e)<r/>
		{<r/>
			inform("画像読み込みに失敗しました。");<r/>
			throw e; // メッセージを表示はするが、例外を再び投げる<r/>
		}<r/>
	}<r/>
<r/>
	function test()<r/>
	{<r/>
		// tryloadimage を呼び出し、画像読み込みが成功すれば true<r/>
		// そうでなければ false を返す関数<r/>
		try<r/>
		{<r/>
			tryloadimage();<r/>
		}<r/>
		catch<r/>
		{<r/>
			return false;<r/>
		}<r/>
		return true;<r/>
	}<r/>
</example>
　ここで test() を呼び出し、画像読み込みに失敗した場合は、inform メソッドによりメッセージが表示されますが、再び例外が投げられるため、test 関数内の catch により捕捉することができます。<r/>
</para>
</doc>
