<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>変数</title>

<para>
<ptitle>変数</ptitle>
　TJS2 の変数は <kw>var</kw> キーワードで指定します。TJS2 では変数を宣言しなければ使うことができません。<r/>
　var キーワードの書式は以下の通りです。<r/>
<bq>
　var 変数名;<r/>
</bq>
　変数名は <kw>,</kw> (カンマ)で区切って複数個指定することもできます。変数に初期値が必要な場合は、<r/>
<bq>
　var 変数名 = 初期値;<r/>
</bq>
　の書式で変数に初期値を代入することができます。<r/>
<example>
	var variable=0;<r/>
	var var2=variable+2;<r/>
	var var3="this is var3.";<r/>
	var var1,var2,var3;<r/>
	var a=0,b=1,c=3;<r/>
</example>
<r/>
　変数は宣言時に型を指定する必要はありません。代入されたものの型になります。また、計算途中や文脈では、自動的に型が変換されます。<r/>
</para>

<para>
<ptitle>変数名</ptitle>
　変数名として有効なのはすべての識別子です。<r/>
<example>
	var ampan;<r/>
	var 123a;  // 数字が先頭にきているので NG<r/>
	var function; // function は予約語なので NG<r/>
	var function1; // 予約語を含むが予約語そのものではないので OK<r/>
	var 変数その一; // いわゆる全角文字も使用可能<r/>
</example>
</para>

<para>
<ptitle>変数の２重宣言</ptitle>
　同じ名前の変数を二回以上宣言してもエラーになりません。ただし、二回目以降の宣言で初期値が指定された場合、その初期値が変数に代入されます。２回目以降の宣言で初期値が与えられなかった場合は、void になります。<r/>
<example>
	var a=0;<r/>
	var a; // 二回目の宣言 (エラーにならなく、a は void になる)<r/>
	var a=-1; // 三回目の宣言 (エラーにならないが a には -1 が代入される)<r/>
</example>
</para>

<para>
<ptitle>変数のスコープ</ptitle>
　{  }  (ブロック) で囲まれた部分で宣言された変数は、そのブロック内のみで有効な変数、つまり<kw>ローカル変数</kw>になります。<r/>
　また、C 言語と異なり、変数が宣言できる位置に制限はありません。<r/>
<example>
	while(t--)<r/>
	{<r/>
		var ratio=t/all; // 変数 'ratio' を宣言<r/>
		setRatio(ratio);<r/>
	}<r/>
<r/>
	// ここに制御が移ったとき、'ratio' は削除されている<r/>
<r/>
	var test; // ここでも変数を宣言することができる<r/>
</example>
<r/>
　また、ブロック外の変数と同じ名前の変数がブロック内で宣言された場合、そのブロック内では、新しく宣言された変数のみにアクセスできます。<r/>
<example>
	var ratio=0;<r/>
	if(flag)<r/>
	{<r/>
		var ratio; // ブロック外で宣言されている変数と同名の変数<r/>
<r/>
		ratio=buf.position / buf.totalTime; // ブロック内の ratio にのみアクセスできる<r/>
		setRatio(ratio);<r/>
	}<r/>
<r/>
	// ブロックを抜けるとブロック内の ratio は削除されるが、ブロック外の ratio はそのまま<r/>
	ratio=-1;<r/>
</example>
<note>
　すべてのスコープの外側 (これをグローバルスコープと呼びます) で var で変数を宣言すると、その変数はグローバルオブジェクトのメンバとなります。<r/>
</note>
</para>
</doc>

