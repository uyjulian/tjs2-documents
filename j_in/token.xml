<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>トークン</title>
<para>
<ptitle>トークン</ptitle>
　スクリプトは、解釈中、すべてトークンと呼ばれる単位に分解されて処理されます。<r/>
　トークンと次のトークンの境界は、トークンの種類によって異なります。
</para>

<para>
<ptitle>裸の単語</ptitle>
　「裸の単語」とは、<tt>""</tt> や <tt>''</tt> クオート(引用)されていない、スクリプト中に直接書かれる特定の文字の並びのことです。<r/>
　「裸の単語」は以下の規則を持っています。<r/>
　<r/>
<ul>
<li>アルファベットの小文字・大文字、'<tt>_</tt>'(アンダーバー)、数字、いわゆる全角文字で構成される。ただし数字は先頭にくることができない。</li>
<li>これらの連続が終わるまでが、一つの「裸の単語」として扱われる</li>
</ul>
<r/>
<example>
	ampan  // OK<r/>
	123a // 数字が先頭に来ているので NG<r/>
	_asdf // アンダーバーは先頭にくることができるので OK<r/>
	continue // これは予約語 OK<r/>
	全角文字 // いわゆる全角文字は「裸の単語」として OK<r/>
</example>
<r/>
　「裸の単語」は、さらに予約語と識別子に分類されます。<r/>
</para>

<para>
<ptitle>予約語</ptitle>
　予約語は以下のもので、識別子ではありません。「裸の単語」のうち、予約語ではないものはすべて識別子です。<r/>
<r/>
<tt>
  break  continue  const  catch  class  case<r/>
  debugger  default  delete  do  extends  export<r/>
  enum  else  function  finally  false  for<r/>
  global  getter  goto  incontextof  Infinity<r/>
  invalidate  instanceof  isvalid  import  int  in<r/>
  if  NaN  null  new  octet  protected  property<r/>
  private  public  return  real  synchronized  switch<r/>
  static  setter  string  super  typeof  throw<r/>
  this  true  try  void  var  while  with</tt>
<r/>
<r/>
　これらの予約語は、スクリプトの文法を構成する重要な用途として特殊な意味をそれぞれ持っています。このうちのいくつかは、演算子として使用されるものです。<r/>
　ただし、現バージョンではこれらのすべての予約語が使用されているわけではありません。<r/>
</para>

<para>
<ptitle>識別子</ptitle>
　「識別子」は、「裸の単語」のうち、予約語でないものすべてです。これらは、記述者が自由に命名することのできる変数や関数、クラス名などに用いられます。<r/>
　識別子は予約語を含んでいても、予約語そのものでなければ、予約語ではなく識別子として認識されます。<r/>
</para>

<para>
<ptitle>記号</ptitle>
　記号類もトークンとして分解されます。記号類には以下のものがあります。<r/>
<r/>
<tt>>>>=  >>>  >>=  >>  >=  >  &lt;&lt;=  &lt;=<r/>
&lt;->  &lt;&lt;  &lt;  ===  ==  =>  =  !==  !=  !<r/>
&amp;&amp;=  &amp;&amp;  &amp;=  &amp;  ||=<r/>
||  |=  |  ...   .   ++  +=  +  -=  --  -  *=<r/>
*  /=  /  \=  \  %=  %  ^=  ^  [  ]  (  )  ~<r/>
?  :  ,  ;  {  }  #  $</tt><r/>
<r/>
　これらは、最長一致でトークンとして切り出されます。たとえば、 <tt>++</tt> は、 <tt>+</tt> と <tt>+</tt> ではなく、 <tt>++</tt> という一つの記号として分解されます。これらを別々の <tt>+</tt> と <tt>+</tt> として記述したいばあいは、<tt>+</tt> と <tt>+</tt> の間にスペースなどを挟む必要があります。<r/>
<r/>
　記号類は、それぞれ文法を構成する要素として重要な意味を持っています。記号のうち、いくつかは演算子として使用されるものです。<r/>
</para>

<para>
<ptitle>数値即値</ptitle>
　数値即値は、数字、あるいは <tt>.</tt> (小数点)で始まるものです。<tt>TJS2</tt> は、以下の形式を認識します。<r/>
　普通に数値を書けばそのまま10進の数値即値になります。<r/>
<example>
	0<r/>
	3.1<r/>
	342.3<r/>
	1<r/>
</example>
<r/>
　また、10進については <tt>e</tt> または <tt>E</tt> を使い、10を底とする <kw>指数指定</kw>をすることもできます。<tt>e</tt> でも <tt>E</tt> でも意味は同じです。<r/>
<example>
	1e-3   // 1×10<sup>-3</sup><r/>
	3.4e10   // 3.4×10<sup>10</sup><r/>
	9.3E-2  // 9.3×10<sup>-2</sup><r/>
</example>
<r/>
　先頭に <tt>0x</tt> または <tt>0X</tt> をつけると <kw>16進数</kw>での指定となります。<tt>0x</tt> でも <tt>0X</tt> でも意味は同じです。<r/>
<example>
	0x1234<r/>
	0Xff<r/>
	0x3f33<r/>
</example>
<r/>
　先頭に <tt>0b</tt> または <tt>0B</tt> をつけると <kw>2進数</kw>での指定となります。<r/>
<example>
	0b0100<r/>
	0B0010100010100001<r/>
</example>
<r/>
　先頭に <tt>0</tt> がつくと <kw>8進数</kw>として扱われます。<r/>
<example>
	01234<r/>
	033<r/>
</example>
<r/>
　16進、8進、2進についても、小数点形式や p による指数指定が可能です。p は 2 を底とする指数指定です。<r/>
<example>
	0b1.1    // 1 + 1/2 で 1.5 を表す<r/>
	0x2.f    // 2 + 15/16 で 2.9375 を表す<r/>
	0x1p8    // 1 × 2<sup>8</sup> で 256.0 を表す<r/>
</example>
<r/>
<r/>
　数値即値は、それが数値即値の構成文字である限り一つの数値即値としてあつかわれます。<r/>
</para>

<para>
<ptitle>文字列即値</ptitle>
　文字列即値(文字列リテラル)は、<tt>""</tt> (ダブルクオーテーション) または <tt>''</tt>(シングルクオーテーション)で囲まれるものです。ダブルクオーテーションをつかってもシングルクオーテーションを使ってもかまいません。<r/>
　ただし、<tt>""</tt> (ダブルクオーテーション) 中では '(シングルクオーテーション) を、<tt>''</tt>(シングルクオーテーション)中では <tt>"</tt> (ダブルクオーテーション) を、<tt>\</tt> でエスケープする必要が無くなります。<r/><!--'-->
<example>
	"this is a string."<r/>
	'this is also a string.'<r/>
	"Can't use without a quotation."<r/>
</example>
<r/>
　文字列中で <tt><kw>\</kw></tt> (円記号) は特別な意味を持ちます。 \ の後に続く文字で意味が変わります。\ に続けて特殊な指定をすることを<kw>エスケープ</kw>するといいます。<r/>
<r/>
<bq>
\\    : \ マーク自体<r/>
\'    : ' (シングルクオーテーション)<r/>
\"    : " (ダブルクオーテーション)<r/>
\a    : BEL (可聴ベル)<r/>
\b    : BS (後退)<r/>
\f    : FF (フォームフィード)<r/>
\n    : LF (改行)<r/>
\r    : CR (復帰)<r/>
<r/>
\t    : HT (水平タブ)<r/>
\v    : VT (垂直タブ)<r/>
\xH   : H=16 進数 ( H が文字コードを表します )<r/>
\XH   : 上に同じ<r/>
</bq>
<r/>
　<tt>\xH</tt> の形式で、H の部分には 16 進数を指定します。すると、その 16 進数は文字コードとして扱われ、その一文字に置き換わります。
<r/>
<r/>
<example>
	'Can\'t help'  ( \' を用いている )<r/>
	"\x1234"     ( ワイド文字としての 0x1234 という文字コードの文字 )<r/>
</example>
<r/>
また、<tt>\xH</tt> の形式では、 \x の次に　16 進数を構成する文字 ( 0縲鰀9 、A縲廡、a縲彷 ) が続く限り、それは H の部分であるとみなされます。ただし、ワイド文字のサイズが 16bit の環境では最大 4 桁、32bit のマシンでは最大 8 桁までが認識されます ( Windowsの場合は 16bit、Linux や Solaris では 32bit です )。<r/>
<tt>"<em>\x22A</em>n Apple"</tt> とかくと、先頭は \x22A であるとみなされてしまいます。これを避けるには、<tt>"\x22" "An Apple"</tt> として、文字列をわけ、続けて書いてください。TJS では、このように文字列即値が連続する場合、ひとつの文字列だとみなします。<r/>
<r/>
　文字列については <link href="string"/> も参照してください。<r/>
</para>


<para>
<ptitle>@ つき文字列即値</ptitle>
　文字列即値の前に @ を置くと、その文字列即値中の &amp; から ; までの間、または ${ から } までの間を式とみなし、それを評価した結果をそこに展開するようになります (式を &amp; と ; の間や ${ と } に書けば、その結果がそこに埋め込まれます)。<r/>
　&amp; や $ を展開したくない場合は、&amp; や $ の前に \ を置くことで &amp; や $ を展開しないようにすることができます。<r/>
<r/>
<example>
	@"1+2=&amp;1+2;"  ( "1+2=3" という文字列になる )<r/>
	@"変数 f の内容は &amp;f; です"  ( 変数 f の内容を &amp;f; の場所に展開する )<r/>
	@"関数 func を呼び出した結果は &amp;func(); です"  ( 式として有効なものならば &amp; と ; の間に記述可 )<r/>
	@"関数 func を呼び出した結果は ${func()} です"  ( 上と同じ )<r/>
	@"true \&amp;\&amp; false は &amp;true &amp;&amp; false;"  ( &amp; の前に \ を書けば &amp; は展開されない )<r/>
</example>
<r/>
　ここに記述する式は、この文字列の書かれている場所からアクセス可能な範囲にある変数など (ローカル変数を含む) にアクセスできます。<r/>
</para>


<para>
<ptitle>オクテット列即値</ptitle>
　オクテット列即値は、<tt>&lt;%</tt> と <tt>%></tt> で囲まれるもので、中にオクテットデータ ( バイナリデータ ) を書くことができます。<r/>
　データは二桁の16進数をスペースなどで区切り、複数指定します。<r/>
<example>
	&lt;% 00 01 02 03 %><r/>
	&lt;% ff ff ff 00 04 0f ff 30 %><r/>
</example>
<r/>
　オクテット列については <link href="octet"/> も参照してください。<r/>
</para>

<para>
<ptitle>正規表現パターン</ptitle>
　正規表現パターンは、<tt>/</tt> と <tt>/</tt> で囲まれるもので、なかに正規表現パターンを書くことができます。<r/>
　正規表現パターンの後に続けてフラグ文字を書くことができ、g は グローバルサーチフラグ ( 見つかったものをすべてにマッチ;このフラグがないと最初のものだけにマッチ )、i は英字大文字小文字を区別しないフラグ、l はローカライズされたコレーションを行うようにするフラグです。<r/>
　このようにして書かれた正規表現パターンは、RegExp クラスのオブジェクトとして扱われます。<r/>
<example>
	/[0-9]-[0-9]-[0-9]/<r/>
	/^;\s*(.*?)\s*=(.*)$/<r/>
	/start(.*?)end/gi<r/>
</example>
<r/>
　正規表現パターンについては <link href="regexp"/> も参照してください。<r/>
</para>



</doc>
