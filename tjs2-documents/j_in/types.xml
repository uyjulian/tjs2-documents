<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>データ型</title>

<para>
<ptitle>データ型</ptitle>
　TJS2 には変数に「型」はありませんが、内部的には型を持っています。型を持たないと言うよりは、型が自動的/動的に扱われるということです。<r/>
　内部の型としては、<tt>void</tt>, 整数型、実数型、文字列型、オブジェクト型、オクテット列型があります。<r/>
</para>

<para>
<ptitle>void</ptitle>
　void は、何も表していないことを表します ( JavaScript とは意味が違います )。宣言したての変数は <tt>void</tt> です。<r/>
　<tt>void</tt> 同士の比較には、<tt>===</tt> (識別) 演算子を用います。<r/>
　<tt><kw>typeof</kw></tt> 演算子は、これに対しては <tt>"void"</tt> を返します。<r/>
</para>

<para>
<ptitle>整数型</ptitle>
　TJS2 は整数型として 64bit の精度の整数を扱うことができます。整数は通常<kw>符号あり整数</kw>として扱われますが、唯一の例外として <tt><kw>>>></kw></tt> 演算子は、左辺を<kw>符号なし整数</kw>として扱います。<r/>
　typeof 演算子は、これに対しては <tt>"<kw>Integer</kw>"</tt> を返します。<r/>
</para>

<para>
<ptitle>実数型</ptitle>
　TJS2 は実数型として 64bit の精度の実数 ( <kw>倍精度実数</kw> ) を扱うことができます。<r/>
　typeof 演算子は、これに対しては <tt>"<kw>Real</kw>"</tt> を返します。<r/>
</para>

<para>
<ptitle>文字列型</ptitle>
　TJS2 は長さ制限のない、ゼロ終結文字列を扱うことができます。ゼロ終結文字列とは、<tt>\0</tt> で文字列が終わると仮定して文字列を扱うと言うことです。<r/>
　文字コードはワイド文字 ( 通常は <kw>UNICODE</kw> ) を扱いますが、16bitのワイド文字か 32bitのワイド文字かは TJS2 がコンパイルされた環境によって異なります。たとえば Windows では 16bit ですが、Solaris や Linux では 32bit になります。<r/>
　typeof 演算子は、これに対しては <tt>"<kw>String</kw>"</tt> を返します。<r/>
</para>

<para>
<ptitle>オブジェクト型</ptitle>
　オブジェクト型は、オブジェクトを保持する型です。<tt>new</tt> 演算子で確保したオブジェクトのほか、関数、クラス、プロパティオブジェクトなどはすべてオブジェクト型になります。<r/>
　<tt>typeof</tt> 演算子は、これに対しては <tt>"<kw>Object</kw>"</tt> を返します。<r/>
<r/>
　TJS や JavaScript と異なり、TJS2 のオブジェクト型は、オブジェクトそのものへのポインタと、それが使用されるべきコンテキストとなるオブジェクトのポインタの２つのポインタを内部に持っていて、いわゆるクロージャを実現できるようになっています。このコンテキスト部分を変更する演算子が <tt>incontextof</tt> 演算子です。<r/>
</para>

<para>
<ptitle>オクテット列型</ptitle>
　オクテット列型は、8bit 幅のデータ列 (オクテット列型) をあつかう型です。主に<kw>バイナリデータ</kw>を扱うための型です。<r/>
　<tt>typeof</tt> 演算子は、これに対しては <tt>"<kw>Octet</kw>"</tt> を返します。<r/>
</para>

</doc>
