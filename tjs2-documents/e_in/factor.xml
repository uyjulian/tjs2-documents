<?xml version="1.0" encoding="UTF-8" ?>

<doc>
<title>Keyword</title>

<para>
<ptitle>Keyword</ptitle>
　Terms have the highest precedence in expression evaluation. These are the usual immediates, the identifier <comlink href = "token" />, as well as:<r/>
</para>

<para>
<ptitle>true and false</ptitle>
　<tt>true</tt> and <tt>false</tt> (<kw>true and false</kw>) are treated as integer values with the values <tt>1</tt> and <tt>0</tt>, respectively.<r/>
<r/>
　Avoid comparing <tt>true</tt> and <tt>false</tt> with other expressions. For example, do not do something like <tt>if (true != GetBoolean()) </tt>, but write something like <tt>if (!GetBoolen())</tt>. In the logical expression, "0 is false" and "other than 0 is true", not "<tt>1</tt> is true", and TJS2 has no logical type (Boolean), so this is because the conversion of the typical numerical value ← → logical type is not performed.<r/>
</para>

<para>
<ptitle>void</ptitle>
　<tt>void</tt> indicates "none." Used in a variety of ways to represent "nothing." Not the same as <tt>null</tt>.<r/>
　The variable you just declared (the one with no assignment) is this value.<r/>
　If treated as a character string, it will be an empty string (''). If treated as a number, it will be 0.<r/>
<r/>
　We recommend that you use the <tt>===</tt> or <tt>!==</tt> (identify) operator to compare <tt>void</tt>.<r/>
</para>

<para>
<ptitle>null</ptitle>
　<tt>null</tt> indicates that the object is "not indicating any object". Not the same as <tt>void</tt>.<r/>
　Attempting to access a null object will result in an error.<r/>
　Changing the context to null using the incontextof operator causes the function to be executed on the context where it was called.<r/>
<example>
	var objmethod = obj.method;<r/>
	objmethod(); // run in the context of obj<r/>
	objmethod = objmethod incontextof null; // Change context to null<r/>
	objmethod(); // run on this (ie the context at the call location)<r/>
</example>
</para>

<para>
<ptitle>Infinity</ptitle>
　<tt>Infinity</tt> represents infinity. <tt>-Infinity</tt> represents negative infinity.<r/>
</para>

<para>
<ptitle>NaN</ptitle>
　<tt>NaN</tt> stands for Not a Number. Not-a-number is a number that can be obtained if the result of a calculation is invalid.<r/>
</para>

<para>
<ptitle>super</ptitle>
　<tt>super</tt> represents the class's superclass in the class's methods / properties. Attempting to reference a non-class method / property or within a class that has multiple inheritance will result in an error.<r/>
</para>

<para>
<ptitle>global</ptitle>
　<tt>global</tt> represents a global object. You can access variables, classes, functions that are not methods of the class, and so on, declared outside all blocks.<r/>
<r/>
<example>
	var v;<r/>
	function test(v)<r/>
	{<r/>
		global.v=v;  // Set v of argument to v of global<r/>
	}<r/>
</example>
</para>

<para>
<ptitle>this</ptitle>
　<tt>this</tt> represents the object itself of a class, usually within a method or property of the class.<r/>
　The "context" specified explicitly or implicitly at the time of the call is specified as <tt>this</tt>.<r/>
</para>

<para>
<ptitle>Function in expression</ptitle>
　You can write a function in an expression using <tt>function</tt>. See <link href="function"/>.<r/>
</para>

<para>
<ptitle>Array in expression</ptitle>
　You can use <tt><kw>[ ]</kw></tt> to describe an object of class <tt>Array</tt> on the fly in an expression. See <link href="array"/>.<r/>
</para>

<para>
<ptitle>Dictionary array in expression</ptitle>
　You can use <tt><kw>%[]</kw></tt> to describe an object of the <tt>Dictionary</tt> class on the fly in an expression. See <link href="dictionary"/>.<r/>
</para>
</doc>
