<?xml version="1.0" encoding="UTF-8" ?>
<doc>
<title>iTJSDispatch2 interface</title>

<para>
<ptitle>What is iTJSDispatch2</ptitle>
　iTJSDispatch2 is an abstract base class that provides an interface to "objects" in TJS2.<r/>
　"Objects" of TJS2 include function objects, classes, property objects, and arrays (dictionary arrays).<r/>
　Most operations on TJS2 can be performed through this interface.<r/>
<r/>
　In the following, it is described as the side using this interface.<r/>
</para>




<para>
<ptitle>Call by ordinal</ptitle>
<r/>
　Some iTJSDispatch2 methods have method names that end with ByNum. This is a call by ordinal. For example, calling FuncCall with a member name of "23" is equivalent to calling FuncCallByNum with an ordinal of 23.<r/>
　Useful when accessing array objects.<r/>
<r/>
　Methods ending with ByNum have no membername and hint arguments for methods of the same name without the suffix ByNum, but instead have tjs_int num. Specify an ordinal number in the argument num.<r/>
<r/>
　In the following, the method that calls by ordinal is not described in detail (see the description of the method with the same name without ByNum at the end).<r/>
</para>









<para>
<ptitle>AddRef</ptitle>
tjs_uint iTJSDispatch2::AddRef(void)<r/>
<r/>
　Increments the reference counter for the object.<r/>
　Each object of TJS2 is managed by reference counter.<r/>
　The return value is the value of the reference counter after the increment, but trusting this value is not recommended.<r/>
</para>









<para>
<ptitle>Release</ptitle>
tjs_uint iTJSDispatch2::Release(void)<r/>
<r/>
　Decrements the object's reference counter.<r/>
　The return value is the value of the reference counter after decrementing. A return of 0 indicates that the object has been released. However, trusting this value is not recommended.<r/>
</para>













<para>
<ptitle>FuncCall</ptitle>
tjs_error iTJSDispatch2::FuncCall(<r/>
	tjs_uint32 flag,<r/>
	const tjs_char * membername,<r/>
	tjs_uint32 *hint,<r/>
	tTJSVariant *result,<r/>
	tjs_int numparams,<r/>
	tTJSVariant **param,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Make a function call.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>

<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag (see below).
</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Member name to be operated.<r/>
　If NULL, the operation is on this object itself. In this case, this object must be able to function.
</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　"<kw>Hint</kw>" for variable storage. May be NULL.<r/>
　The hint is to speed up the search for the same member name from the second time. If you specify a pointer to a tjs_uint32 type variable for hint, the hint value is written to it. From the second time onward, search for members by referring to the numerical value. For hints, the initial value of the hint can be any value (0 is recommended). In addition, due to such a mechanism, it is more efficient if there is a one-to-one correspondence between hints and corresponding member names (tTJSString type has a mechanism for this hint).<r/>
　Some objects may not have a mechanism for using hints.
</dd>


<dt>tTJSVariant *result</dt>
<dd>
　Points to a tTJSVariant to store the result of calling the function.<r/>
　If no result is needed, NULL can be specified.
</dd>


<dt>tjs_int numparams</dt>
<dd>
　Specify the number of arguments to pass to the function.
</dd>


<dt>tTJSVariant **param</dt>
<dd>
　Pass an array of pointers to the arguments to pass to the function. May be NULL if there are no arguments.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specifies the context (this object) in which the function runs.
</dd>
</dl>
</para>





<para>
<ptitle>FuncCallByNum</ptitle>
tjs_error iTJSDispatch2::FuncCall(<r/>
	tjs_uint32 flag,<r/>
	tjs_int num,<r/>
	tTJSVariant *result,<r/>
	tjs_int numparams,<r/>
	tTJSVariant **param,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Makes a function call by ordinal.<r/>
</para>




<para>
<ptitle>PropGet</ptitle>
tjs_error iTJSDispatch2::PropGet(<r/>
	tjs_uint32 flag,<r/>
	const tjs_char * membername,<r/>
	tjs_uint32 *hint,<r/>
	tTJSVariant *result,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Gets the value of a property or member variable.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag (see below).
</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Member name to be operated.<r/>
<r/>
　If NULL, the operation is on this object itself. In this case, this object must be able to get properties.<r/>
　Objects that succeed even if this argument is NULL are considered property objects. Normally, when such a property object becomes a member of another object, the result of performing PropGet on that property object is used instead of this property object itself. This behavior can be bypassed by specifying TJS_IGNOREPROP in the call flag.
</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　Specify the area of the variable to store the hint. May be NULL.<r/>
　See the description of FuncCall for a description of the hint.
</dd>


<dt>tTJSVariant *result</dt>
<dd>
　Pointer to the tTJSVariant type to store the result. NULL is not allowed.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specifies the context (this object) in which this method runs.
</dd>
</dl>
</para>



<para>
<ptitle>PropGetByNum</ptitle>
tjs_error iTJSDispatch2::PropGetByNum(<r/>
	tjs_uint32 flag,<r/>
	tjs_int num,<r/>
	tTJSVariant *result,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Gets the value of a property or member variable by ordinal.<r/>
</para>







<para>
<ptitle>PropSet</ptitle>
tjs_error iTJSDispatch2::PropSet(<r/>
	tjs_uint32 flag,<r/>
	const tjs_char *membername,<r/>
	tjs_uint32 *hint,<r/>
	const tTJSVariant *param,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Set the values of properties and member variables.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag (see below).
</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Member name to be operated.<r/>
<r/>
　If NULL, the operation is on this object itself. In this case, this object must be able to set properties.<r/>
　Objects that succeed even if this argument is NULL are considered property objects. Normally, if such a property object becomes a member of another object, PropSet will be called on that property object, not on this property object itself. This behavior can be bypassed by specifying TJS_IGNOREPROP in the call flag.
</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　Specify the area of the variable to store the hint. May be NULL.<r/>
　See the description of FuncCall for a description of the hint.
</dd>


<dt>const tTJSVariant *param</dt>
<dd>
　Pointer to a tTJSVariant type variable that represents the value to be set. NULL is not allowed.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specifies the context (this object) in which this method runs.
</dd>
</dl>
</para>


<para>
<ptitle>PropSetByVS</ptitle>
tjs_error iTJSDispatch2::PropSetByVS(<r/>
	tjs_uint32 flag,<r/>
	tTJSVariantString *membername,<r/>
	const tTJSVariant *param,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Set the values of properties and member variables. Unlike PropSet, member names are referenced by tTJSVariantString. Used internally. Since tTJSVariantString has the same string memory area shared by multiple string objects, setting properties (creating a member in the object) through this method will result in a member name It can prevent the increase of the memory for the character string memory area used for.<r/>
　If you do not implement this method, return TJS_E_NOTIMPL. PropSet is used instead. Also, if this method returns TJS_E_NOTIMPL, implement PropSet instead.<r/>
<r/>
</para>






<para>
<ptitle>PropSetByNum</ptitle>
tjs_error iTJSDispatch2::PropSetByNum(<r/>
	tjs_uint32 flag,<r/>
	tjs_int num,<r/>
	const tTJSVariant *param,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Set the values of properties and member variables by ordinal.<r/>
</para>







<para>
<ptitle>GetCount</ptitle>
tjs_error iTJSDispatch2::GetCount(<r/>
	tjs_int *result,<r/>
	const tjs_char *membername,<r/>
	tjs_uint32 *hint,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Returns the number of members held by the object.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_int *result</dt>
<dd>
　Points to a variable to store the result. NULL is not allowed.
</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Specify the name of the target member.<r/>
　If NULL, returns the number of members held by this object itself.<r/>
　Given a member name, if the member is an object, returns the number of members held by the object. Fails if the specified member is not an object type.
</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　Specify the area of the variable to store the hint. May be NULL.<r/>
　See the description of FuncCall for a description of the hint.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specifies the context (this object) in which this method runs.<r/>
　This argument is usually meaningless (ignored).
</dd>
</dl>
</para>




<para>
<ptitle>GetCountByNum</ptitle>
tjs_error iTJSDispatch2::GetCount(<r/>
	tjs_int *result,<r/>
	tjs_int num,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　An ordinal version of GetCount.<r/>
</para>



<para>
<ptitle>DeleteMember</ptitle>
tjs_error iTJSDispatch2::DeleteMember(<r/>
	tjs_uint32 flag,<r/>
	const tjs_char *membername,<r/>
	tjs_uint32 *hint,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Delete members.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag (see below).
</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Specify the name of the target member. NULL is not allowed.
</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　Specify the area of the variable to store the hint. May be NULL.<r/>
　See the description of FuncCall for a description of the hint.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specifies the context (this object) in which this method runs.<r/>
　This argument is usually meaningless (ignored).
</dd>
</dl>
</para>






<para>
<ptitle>DeleteMemberByNum</ptitle>
tjs_error iTJSDispatch2::DeleteMemberByNum(<r/>
	tjs_uint32 flag,<r/>
	tjs_int num,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Delete members by ordinal.<r/>
</para>



<para>
<ptitle>EnumMembers</ptitle>
tjs_error iTJSDispatch2::EnumMembers(<r/>
		tjs_uint32 flag,<r/>
		tTJSVariantClosure *callback,<r/>
		iTJSDispatch2 *objthis<r/>
		)<r/>
<r/>
　Enumerates members in an object.<r/>
　A callback function can be specified for callback, but in the current version, the operation when creating or deleting a member of this object in the callback function is not guaranteed.<r/>
<r/>
　The arguments are as follows:<r/>
　<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag. For the call flag, specify the bit OR of the following flags or 0 (zero).<r/>

<dl>

<dt>TJS_IGNOREPROP</dt>
<dd>
　Disable property access. When enumerating members and obtaining values, if this flag is specified, if the member is a property, the property object itself will be obtained. If you do not specify this flag, you get the value obtained through the property object.<r/>
</dd>

<dt>TJS_ENUM_NO_VALUE</dt>
<dd>
　Do not get the value. If this flag is specified, two arguments will be passed to the callback function. If specified, there will be three.<r/>
</dd>

</dl>
</dd>

<dt>tTJSVariantClosure *callback</dt>
<dd>
　Specify a callback function.<r/>
　In this callback function, callback-> FuncCall is called once for each member.<r/>
　Two (if TJS_ENUM_NO_VALUE is specified) or three (if TJS_ENUM_NO_VALUE is not specified) arguments are passed to the function.<r/>
<ul>
<li>The first argument is a string type and is a member name</li>
<li>The second argument is of type integer and is a flag for its members. Combination of bitwise OR of TJS_HIDDENMEMBER or TJS_STATICMEMBER, or 0 is specified</li>
<li>The third argument exists only when TJS_ENUM_NO_VALUE is not specified, and indicates the value of the member</li>
</ul>
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specifies the context (this object) in which this method runs.<r/>
　This argument is the default context in which the property object will run if the TJS_IGNOREPROP flag is not specified.<r/>
</dd>

</dl>




</para>








<para>
<ptitle>Invalidate</ptitle>
tjs_error iTJSDispatch2::Invalidate(<r/>
	tjs_uint32 flag,<r/>
	const tjs_char *membername,<r/>
	tjs_uint32 *hint,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Perform invalidation.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag (see below).
</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Specify the name of the target member.<r/>
　If NULL, this object itself is invalidated.<r/>
　If a member name is specified, the object is invalidated if the member is an object. Fails if the specified member is not an object type.
</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　Specify the area of the variable to store the hint. May be NULL.<r/>
　See the description of FuncCall for a description of the hint.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specifies the context (this object) in which this method runs.<r/>
　This argument is usually meaningless (ignored).
</dd>
</dl>
</para>



<para>
<ptitle>InvalidateByNum</ptitle>
tjs_error iTJSDispatch2::InvalidateByNum(<r/>
	tjs_uint32 flag,<r/>
	tjs_int num,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
Invalidate by ordinal.<r/>
</para>





<para>
<ptitle>IsValid</ptitle>
tjs_error iTJSDispatch2::IsValid(<r/>
	tjs_uint32 flag,<r/>
	const tjs_char *membername,<r/>
	tjs_uint32 *hint,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Checks if the object is valid.<r/>
　Returns TJS_S_TRUE if enabled, TJS_S_FALSE otherwise.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag (see below).
</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Specify the name of the target member.<r/>
　If NULL, you can check the validity of this object itself.<r/>
　If a member name is specified, the validity of the object can be checked if the member is an object. Fails if the specified member is not an object type.

</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　Specify the area of the variable to store the hint. May be NULL.<r/>
　See the description of FuncCall for a description of the hint.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specifies the context (this object) in which this method runs.<r/>
　This argument is usually meaningless (ignored).
</dd>
</dl>
</para>







<para>
<ptitle>IsValidByNum</ptitle>
tjs_error iTJSDispatch2::IsValidByNum(<r/>
	tjs_uint32 flag,<r/>
	tjs_int num,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Checks if an object is valid by ordinal.<r/>
</para>






<para>
<ptitle>CreateNew</ptitle>
tjs_error iTJSDispatch2::CreateNew(<r/>
	tjs_uint32 flag,<r/>
	const tjs_char * membername,<r/>
	tjs_uint32 *hint,<r/>
	iTJSDispatch2 **result,<r/>
	tjs_int numparams,<r/>
	tTJSVariant **param,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Create a new object.<r/>
　This method is similar to the FuncCall method and allows you to pass arguments to create a new object.<r/>
　The so-called "class object", which is the model of the object, must implement this method.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag (see below).
</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Member name to be operated.<r/>
　If NULL, the operation is on this object itself. In this case, this object must have the ability to create a new object.
</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　Specify the area of the variable to store the hint. May be NULL.<r/>
　See the description of FuncCall for a description of the hint.
</dd>


<dt>iTJSDispatch2 **result</dt>
<dd>
　Pointer to the iTJSDispatch * type to store the newly created object. NULL is not allowed.
</dd>


<dt>tjs_int numparams</dt>
<dd>
　Specify the number of arguments to pass when creating a new object.
</dd>


<dt>tTJSVariant **param</dt>
<dd>
　Pass an array of pointers of arguments to pass when creating a new object. May be NULL if there are no arguments.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specify the context (this object) to be executed when creating a new object.
</dd>
</dl>
</para>





<para>
<ptitle>CreateNewByNum</ptitle>
tjs_error iTJSDispatch2::CreateNew(<r/>
	tjs_uint32 flag,<r/>
	tjs_int num,<r/>
	iTJSDispatch2 **result,<r/>
	tjs_int numparams,<r/>
	tTJSVariant **param,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Creates a new object by ordinal.<r/>
</para>








<para>
<ptitle>IsInstanceOf</ptitle>
tjs_error iTJSDispatch2::IsInstanceOf(<r/>
	tjs_uint32 flag,<r/>
	const tjs_char * membername,<r/>
	tjs_uint32 *hint,<r/>
	const tjs_char * classname,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Determines whether an object is an instance of a particular class.<r/>
　The class name is passed as a string in the classname argument.<r/>
　Referenced by the TJS2 instanceof operator.<r/>
　On success, TJS_S_TRUE if it is an instance of the specified class, otherwise TJS_S_FALSE.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag (see below).
</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Member name to be operated.<r/>
　If NULL, the operation is on this object itself. In this case, this object must have the ability to create a new object.
</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　Specify the area of the variable to store the hint. May be NULL.<r/>
　See the description of FuncCall for a description of the hint.
</dd>


<dt>const tjs_char *classname</dt>
<dd>
　Specify the class name as a character string.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specify the context (this object) to be executed when creating a new object.
</dd>
</dl>
</para>




<para>
<ptitle>IsInstanceOfByNum</ptitle>
tjs_error iTJSDispatch2::IsInstanceOfByNum(<r/>
	tjs_uint32 flag,<r/>
	tjs_int num,<r/>
	const tjs_char * classname,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Finds out if an object is an instance of a particular class by ordinal.<r/>
</para>




<para>
<ptitle>Operation</ptitle>
tjs_error iTJSDispatch2::Operation(<r/>
	tjs_uint32 flag,<r/>
	const tjs_char *membername,<r/>
	tjs_uint32 *hint,<r/>
	tTJSVariant *result,<r/>
	const tTJSVariant *param,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Performs operations on members. The type of operation is specified by flag.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag. In addition to the following normal call flags, one of the following flags must be added with a bit OR to specify the type of operation.<r/>
<r/>
　In this description, v represents the member value, and p represents the parameter passed in the param argument.<r/>
<r/>
<dl>

<dt>TJS_OP_BAND</dt>
<dd>
Bit AND operation<r/>
v &amp;= p
</dd>


<dt>TJS_OP_BOR</dt>
<dd>
Bit OR operation<r/>
v |= p
</dd>


<dt>TJS_OP_BXOR</dt>
<dd>
Bit XOR operation<r/>
v ^= p
</dd>


<dt>TJS_OP_SUB</dt>
<dd>
Subtraction<r/>
v -= p
</dd>


<dt>TJS_OP_ADD</dt>
<dd>
Addition<r/>
v += p
</dd>


<dt>TJS_OP_MOD</dt>
<dd>
Modulus<r/>
v %= p
</dd>


<dt>TJS_OP_DIV</dt>
<dd>
Real number division<r/>
v /= p
</dd>


<dt>TJS_OP_IDIV</dt>
<dd>
Integer division<r/>
v \= p
</dd>


<dt>TJS_OP_MUL</dt>
<dd>
Multiplication<r/>
v *= p
</dd>


<dt>TJS_OP_LOR</dt>
<dd>
Logical OR<r/>
v = v || p
</dd>


<dt>TJS_OP_LAND</dt>
<dd>
Logical AND<r/>
v = v &amp;&amp; p
</dd>


<dt>TJS_OP_SAR</dt>
<dd>
Arithmetic right shift<r/>
v >>= p
</dd>


<dt>TJS_OP_SAL</dt>
<dd>
Arithmetic left shift<r/>
v &lt;&lt;= p
</dd>


<dt>TJS_OP_SR</dt>
<dd>
Bit shift right<r/>
v >>>= p
</dd>


<dt>TJS_OP_INC</dt>
<dd>
Increment<r/>
v++<r/>
param argument ignored
</dd>


<dt>TJS_OP_DEC</dt>
<dd>
Decrement<r/>
v--<r/>
param argument ignored
</dd>
</dl>


</dd>


<dt>const tjs_char * membername</dt>
<dd>
　Member name to be operated. NULL is not allowed.
</dd>


<dt>tjs_uint32 *hint</dt>
<dd>
　Specify the area of the variable to store the hint. May be NULL.<r/>
　See the description of FuncCall for a description of the hint.
</dd>


<dt>tTJSVariant *result</dt>
<dd>
　Pointer to a variable of type tTJSVariant to store the result of the operation. Can be NULL.
</dd>


<dt>tTJSVariant *param</dt>
<dd>
　Specify the parameters for the operation. If TJS_OP_INC or TJS_OP_DEC is specified for the operation type, it can be NULL.
</dd>


<dt>iTJSDispatch2 *objthis</dt>
<dd>
　Specifies the context in which the operation is performed, but is usually ignored.
</dd>
</dl>
</para>





<para>
<ptitle>OperationByNum</ptitle>
tjs_error iTJSDispatch2::OperationByNum(<r/>
	tjs_uint32 flag,<r/>
	tjs_int num,<r/>
	tTJSVariant *result,<r/>
	const tTJSVariant *param,<r/>
	iTJSDispatch2 *objthis<r/>
	)<r/>
<r/>
　Performs an operation on members using ordinal numbers.<r/>
</para>




<para>
<ptitle>NativeInstanceSupport</ptitle>
tjs_error iTJSDispatch2::NativeInstanceSupport(<r/>
	tjs_uint32 flag,<r/>
	tjs_int32 classid,<r/>
	iTJSNativeInstance **pointer<r/>
	)<r/>
<r/>
　Associate an instance of native code with an object or get an instance of native code from an object.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>

<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Specifies the call flags.<r/>
　You must specify one of the following values:<r/>
<r/>
<dl>

<dt><kw>TJS_NIS_REGISTER</kw></dt>
<dd>
　Register the instance of the native code indicated by *pointer. Use classid to identify the class of native code.
</dd>



<dt><kw>TJS_NIS_GETINSTANCE</kw></dt>
<dd>
　Write an instance of native code with the class ID specified by classid to *pointer.
</dd>
</dl>

</dd>



<dt>tjs_int32 classid</dt>
<dd>
　Specify the native code class ID.<r/>
　TJSRegisterNativeClass for managing native code class IDs
TJSFindNativeClassID
You can use TJSFindNativeClassName, but usually these processes are automatically handled by the supporting code group for writing native code (described in tjsNative.cpp / tjsNative.h).
</dd>



<dt>iTJSNativeInstance **pointer</dt>
<dd>
　Specifies a pointer to a variable of type iTJSNativeInstance * to pass or receive an instance of native code.
</dd>
</dl>

</para>



<para>
<ptitle>ClassInstanceInfo</ptitle>
tjs_error iTJSDispatch2::ClassInstanceInfo(<r/>
	tjs_uint32 flag,<r/>
	tjs_uint num,<r/>
	tTJSVariant *value<r/>
	)<r/>
<r/>
　A method that operates on the instance information of the class used in the IsInstanceOf method.<r/>
　You can add a class name to identify which class the object is an instance of, or enumerate the classes to find out which class the object is an instance of.<r/>
<r/>
　The arguments are as follows:<r/>
<r/>
<dl>

<dt>tjs_uint32 flag</dt>
<dd>
　Call flag. Specify one of the following flags:<r/>
<r/>
<dl>

<dt><kw>TJS_CII_ADD</kw></dt>
<dd>
　Add instance information.<r/>
　In value, pass a pointer to a tTJSVariant type variable that stores the class name (string).<r/>
　The num argument is ignored.
</dd>


<dt><kw>TJS_CII_GET</kw></dt>
<dd>
　Get instance information.<r/>
　Specify an integer starting from 0 for the num argument. TJS_E_FAIL is returned if num is specified exceeding the number of set instance information.<r/>
　In value, pass a pointer to a tTJSVariant type variable to receive the class name.
</dd>
</dl>
</dd>



<dt>tjs_uint num</dt>
<dd>
　Specify the ordinal number when TJS_CII_GET is specified for flag.
</dd>



<dt>tTJSVariant *value</dt>
<dd>
　If TJS_CII_ADD is specified for flag, pass a pointer to a tTJSVariant variable that stores the class name.<r/>
　If TJS_CII_GET is specified for flag, pass a pointer to a tTJSVariant type variable to receive the class name.
</dd>
</dl>


</para>



<para>
<ptitle>Call flag</ptitle>

　Call flag.<r/>
　You can specify combinations of the following values by bit OR.<r/>
<r/>
<dl>

<dt>TJS_MEMBERENSURE</dt>
<dd>
　If the specified member name is not found, force the member to be created. Valid as a call flag to PropSet.
</dd>


<dt>TJS_MEMBERMUSTEXIST</dt>
<dd>
　Generates an error if the specified member name is not found. This is useful for objects such as Dictionary and Array that return void by default if a member is not found (otherwise an error will occur by default if the member is not found) ).
</dd>





<dt>TJS_IGNOREPROP</dt>
<dd>
　Bypass property operations.<r/>
　A TJS2 object normally returns the result of PropSet or PropGet for that member as a substitute for that member if the specified member is an object and PropSet or PropGet succeeds on that object (if it is a property object). I will use it.<r/>
　When this flag is specified, such processing is bypassed, so even if the specified member is a property object, the operation is performed on the property object itself.
</dd>


<dt>TJS_HIDDENMEMBER</dt>
<dd>
　Creating a member with this flag makes the member invisible. Some objects may not be supported.
</dd>

<dt>TJS_STATICMEMBER</dt>
<dd>
　When a member is created with this flag, the member is static (independent of the execution context). Some objects may not be supported.
</dd>


</dl>
</para>


<para>
<ptitle>tjs_error</ptitle>
　tjs_error is the error type returned by each method of iTJSDispatch2 (except AddRef and Release).<r/>
　Takes the following values. Also, even if the value is not listed here, if the value is negative, it must be regarded as an error. You can use the TJS_SUCCEEDED and TJS_FAILED macros to determine these.<r/>
<r/>
<dl>

<dt><kw>TJS_E_MEMBERNOTFOUND</kw></dt>
<dd>
　The specified member cannot be found.
</dd>



<dt><kw>TJS_E_NOTIMPL</kw></dt>
<dd>
　The function you attempted to call has not been implemented.
</dd>



<dt><kw>TJS_E_INVALIDPARAM</kw></dt>
<dd>
　Invalid argument.
</dd>



<dt><kw>TJS_E_BADPARAMCOUNT</kw></dt>
<dd>
　The number of arguments is invalid.
</dd>



<dt><kw>TJS_E_INVALIDTYPE</kw></dt>
<dd>
　It is not a function or the property type is different.<r/>
　This value is returned when you try to call a non-function object or treat a non-property object as a property.
</dd>



<dt><kw>TJS_E_INVALIDOBJECT</kw></dt>
<dd>
　The object has already been invalidated.
</dd>



<dt><kw>TJS_E_ACCESSDENYED</kw></dt>
<dd>
　You attempted an operation that cannot be performed on a read or write-only property.
</dd>



<dt><kw>TJS_E_NATIVECLASSCRASH</kw></dt>
<dd>
　The execution context is different.<r/>
　This value is returned when an attempt is made to execute a method implemented in native code in a context that cannot be handled by the native code (such as on an object of a different class).
</dd>



<dt><kw>TJS_S_TRUE</kw></dt>
<dd>
　Not an error, but indicates that the result is true.
</dd>



<dt><kw>TJS_S_FALSE</kw></dt>
<dd>
　Not an error, but indicates that the result is false.
</dd>



<dt><kw>TJS_S_OK</kw></dt>
<dd>
　This value usually returns if no error occurred.
</dd>



<dt><kw>TJS_E_FAIL</kw></dt>
<dd>
　This value is returned if an undefined error occurs.
</dd>



<dt><kw>TJS_FAILED</kw>(x)</dt>
<dd>
　A macro that will be true if x is an error value.
</dd>


<dt><kw>TJS_SUCCEEDED</kw>(x)</dt>
<dd>
　A macro that is true if x is a non-error value.
</dd>
</dl>
<r/>


<r/>
　Error definitions and related macros are found in tjsErrorDef.h.<r/>
　Also, a runtime exception (in C++) may be thrown instead of an error. When it comes to programming, you need to consider run-time exceptions.<r/>
</para>


</doc>
